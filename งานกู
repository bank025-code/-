{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM8uqUx8Ud8bYunRqpl1kIE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bank025-code/-/blob/main/%E0%B8%87%E0%B8%B2%E0%B8%99%E0%B8%81%E0%B8%B9\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "id": "VEI8mQsXdWNM",
        "outputId": "0fd30d03-f713-437c-cc7c-007126639483"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'sounddevice'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-16-80abb53d7735>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0msounddevice\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mscipy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwavfile\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mwrite\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'sounddevice'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import sounddevice as sd\n",
        "from scipy.io.wavfile import write\n",
        "\n",
        "# üõ† ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å\n",
        "fs = 44100  # sampling rate (Hz)\n",
        "duration = 3  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n",
        "t = np.linspace(0, duration, int(fs * duration), endpoint=False)\n",
        "\n",
        "# üß© ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå FM\n",
        "fc = 2000       # carrier frequency (Hz)\n",
        "fm = 5          # message frequency (Hz)\n",
        "beta = 5        # modulation index\n",
        "\n",
        "# üì® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (message signal)\n",
        "message = np.sin(2 * np.pi * fm * t)\n",
        "\n",
        "# üéõÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì FM (modulated)\n",
        "fm_signal = np.cos(2 * np.pi * fc * t + beta * np.sin(2 * np.pi * fm * t))\n",
        "\n",
        "# üéß ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á FM\n",
        "print(\"üîä Playing FM sound...\")\n",
        "sd.play(fm_signal, fs)\n",
        "sd.wait()\n",
        "\n",
        "# üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå .wav\n",
        "scaled = np.int16(fm_signal / np.max(np.abs(fm_signal)) * 32767)\n",
        "write(\"fm_modulated.wav\", fs, scaled)\n",
        "print(\"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô fm_modulated.wav ‡πÅ‡∏•‡πâ‡∏ß\")\n",
        "\n",
        "# üìä ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "plt.subplot(2, 1, 1)\n",
        "plt.plot(t[:1000], message[:1000])\n",
        "plt.title(\"üì© ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Message Signal)\")\n",
        "plt.xlabel(\"‡πÄ‡∏ß‡∏•‡∏≤ (s)\")\n",
        "plt.ylabel(\"‡πÅ‡∏≠‡∏°‡∏û‡∏•‡∏¥‡∏à‡∏π‡∏î\")\n",
        "plt.grid()\n",
        "\n",
        "plt.subplot(2, 1, 2)\n",
        "plt.plot(t[:1000], fm_signal[:1000])\n",
        "plt.title(\"üì∂ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏°‡∏≠‡∏î‡∏π‡πÄ‡∏•‡∏ï‡πÅ‡∏ö‡∏ö FM\")\n",
        "plt.xlabel(\"‡πÄ‡∏ß‡∏•‡∏≤ (s)\")\n",
        "plt.ylabel(\"‡πÅ‡∏≠‡∏°‡∏û‡∏•‡∏¥‡∏à‡∏π‡∏î\")\n",
        "plt.grid()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "import hashlib\n",
        "import os\n",
        "import time\n",
        "\n",
        "# üîß ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)\n",
        "files_to_watch = [\"important.txt\", \"car_config.txt\", \"car_log.txt\"]\n",
        "\n",
        "def get_file_hash(filename):\n",
        "    if not os.path.exists(filename):\n",
        "        return None\n",
        "    with open(filename, 'rb') as f:\n",
        "        return hashlib.sha256(f.read()).hexdigest()\n",
        "\n",
        "# üß† ‡πÄ‡∏Å‡πá‡∏ö hash ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå\n",
        "file_hashes = {file: get_file_hash(file) for file in files_to_watch}\n",
        "\n",
        "print(\"‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ:\")\n",
        "for file in files_to_watch:\n",
        "    print(f\" - {file}\")\n",
        "print(\"\\n‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î\\n\")\n",
        "\n",
        "try:\n",
        "    while True:\n",
        "        for file in files_to_watch:\n",
        "            current_hash = get_file_hash(file)\n",
        "            if current_hash != file_hashes[file]:\n",
        "                print(f\"‚ö†Ô∏è {file} ‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß!\")\n",
        "                file_hashes[file] = current_hash  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï hash ‡πÉ‡∏´‡∏°‡πà\n",
        "            else:\n",
        "                print(f\"üü¢ {file} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô\")\n",
        "        time.sleep(5)\n",
        "except KeyboardInterrupt:\n",
        "    print(\"\\n‚õî ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß\")\n",
        "import os\n",
        "\n",
        "def list_all_files(base_path):\n",
        "    file_paths = []\n",
        "    for root, _, files in os.walk(base_path):\n",
        "        for file in files:\n",
        "            file_paths.append(os.path.join(root, file))\n",
        "    return file_paths\n",
        "import os\n",
        "\n",
        "def list_all_files(base_path):\n",
        "    file_paths = []\n",
        "    for root, _, files in os.walk(base_path):\n",
        "        for file in files:\n",
        "            file_paths.append(os.path.join(root, file))\n",
        "    return file_paths\n",
        "# ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord\n",
        "import requests\n",
        "\n",
        "def notify_discord(webhook_url, message):\n",
        "    requests.post(webhook_url, json={\"content\": message})\n",
        "\n",
        "# ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Email (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)\n",
        "import smtplib\n",
        "from email.mime.text import MIMEText\n",
        "\n",
        "def notify_email(to_email, subject, body):\n",
        "    msg = MIMEText(body)\n",
        "    msg[\"Subject\"] = subject\n",
        "    msg[\"From\"] = \"your@email.com\"\n",
        "    msg[\"To\"] = to_email\n",
        "\n",
        "    with smtplib.SMTP(\"smtp.gmail.com\", 587) as server:\n",
        "        server.starttls()\n",
        "        server.login(\"your@email.com\", \"yourpassword\")\n",
        "        server.send_message(msg)\n",
        "import csv\n",
        "from datetime import datetime\n",
        "\n",
        "def write_log(file_path, status):\n",
        "    with open(\"log/changes.csv\", \"a\", newline=\"\") as f:\n",
        "        writer = csv.writer(f)\n",
        "        writer.writerow([datetime.now().isoformat(), file_path, status])\n",
        "# web/app.py\n",
        "from flask import Flask, render_template\n",
        "import csv\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route(\"/\")\n",
        "def index():\n",
        "    logs = []\n",
        "    with open(\"log/changes.csv\") as f:\n",
        "        reader = csv.reader(f)\n",
        "        logs = list(reader)\n",
        "    logs.reverse()  # ‡πÅ‡∏™‡∏î‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô\n",
        "    return render_template(\"index.html\", logs=logs)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    app.run(debug=True)\n",
        "# web/app.py\n",
        "from flask import Flask, render_template\n",
        "import csv\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "@app.route(\"/\")\n",
        "def index():\n",
        "    logs = []\n",
        "    with open(\"log/changes.csv\") as f:\n",
        "        reader = csv.reader(f)\n",
        "        logs = list(reader)\n",
        "    logs.reverse()  # ‡πÅ‡∏™‡∏î‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô\n",
        "    return render_template(\"index.html\", logs=logs)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    app.run(debug=True)\n",
        "\n",
        "# %%\n",
        "WATCH_DIR = \"watch\"\n",
        "DISCORD_WEBHOOK = \"https://discord.com/api/webhooks/your_webhook_url\"\n",
        "EMAIL_TO = \"your@email.com\"\n",
        "EMAIL_FROM = \"your@email.com\"\n",
        "EMAIL_PASSWORD = \"yourpassword\"\n",
        "import os\n",
        "import time\n",
        "import hashlib\n",
        "import requests\n",
        "import smtplib\n",
        "from email.mime.text import MIMEText\n",
        "from datetime import datetime\n",
        "# Assuming 'config' module exists and is in the same directory or accessible\n",
        "# from config import WATCH_DIR, DISCORD_WEBHOOK, EMAIL_TO, EMAIL_FROM, EMAIL_PASSWORD\n",
        "\n",
        "LOG_FILE = \"log/changes.csv\"\n",
        "\n",
        "def list_all_files(base_path):\n",
        "    file_paths = []\n",
        "    for root, _, files in os.walk(base_path):\n",
        "        for file in files:\n",
        "            file_paths.append(os.path.join(root, file))\n",
        "    return file_paths\n",
        "\n",
        "def get_file_hash(filename):\n",
        "    if not os.path.exists(filename):\n",
        "        return None\n",
        "    with open(filename, \"rb\") as f:\n",
        "        return hashlib.sha256(f.read()).hexdigest()\n",
        "\n",
        "def write_log(file_path, status):\n",
        "    os.makedirs(\"log\", exist_ok=True)\n",
        "    with open(LOG_FILE, \"a\", newline=\"\") as f:\n",
        "        f.write(f\"{datetime.now().isoformat()},{file_path},{status}\\n\")\n",
        "\n",
        "def notify_discord(message):\n",
        "    if DISCORD_WEBHOOK:\n",
        "        try:\n",
        "            requests.post(DISCORD_WEBHOOK, json={\"content\": message})\n",
        "        except Exception as e:\n",
        "            print(f\"Discord notify error: {e}\")\n",
        "\n",
        "def notify_email(subject, body):\n",
        "    if EMAIL_TO and EMAIL_FROM and EMAIL_PASSWORD:\n",
        "        try:\n",
        "            msg = MIMEText(body)\n",
        "            msg[\"Subject\"] = subject\n",
        "            msg[\"From\"] = EMAIL_FROM\n",
        "            msg[\"To\"] = EMAIL_TO\n",
        "\n",
        "            server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n",
        "            server.starttls()\n",
        "            server.login(EMAIL_FROM, EMAIL_PASSWORD)\n",
        "            server.send_message(msg)\n",
        "            server.quit()\n",
        "        except Exception as e:\n",
        "            print(f\"Email notify error: {e}\")\n",
        "\n",
        "def main():\n",
        "    file_hashes = {}\n",
        "    while True:\n",
        "        files = list_all_files(WATCH_DIR)\n",
        "        for file in files:\n",
        "            current_hash = get_file_hash(file)\n",
        "            old_hash = file_hashes.get(file)\n",
        "            if old_hash is None:\n",
        "                file_hashes[file] = current_hash\n",
        "                # Log new file detected\n",
        "                write_log(file, \"New file detected\")\n",
        "            elif current_hash != old_hash:\n",
        "                msg = f\"File changed: {file}\"\n",
        "                print(msg)\n",
        "                write_log(file, \"Changed\")\n",
        "                notify_discord(msg)\n",
        "                notify_email(\"FIM Alert: File Changed\", msg)\n",
        "                file_hashes[file] = current_hash\n",
        "        time.sleep(5)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    if not os.path.exists(WATCH_DIR):\n",
        "        os.makedirs(WATCH_DIR)\n",
        "    main()\n",
        "from flask import Flask, render_template\n",
        "import os\n",
        "import csv\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "LOG_FILE = \"log/changes.csv\"\n",
        "\n",
        "@app.route(\"/\")\n",
        "def index():\n",
        "    logs = []\n",
        "    if os.path.exists(LOG_FILE):\n",
        "        with open(LOG_FILE) as f:\n",
        "            reader = csv.reader(f)\n",
        "            logs = list(reader)\n",
        "    logs.reverse()\n",
        "    return render_template(\"index.html\", logs=logs)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    app.run(host=\"0.0.0.0\", port=5000, debug=True)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "<!DOCTYPE html>\n",
        "<html>\n",
        "<head>\n",
        "    <title>File Integrity Monitoring Logs</title>\n",
        "    <style>\n",
        "        table {\n",
        "            border-collapse: collapse;\n",
        "            width: 100%;\n",
        "        }\n",
        "        th, td {\n",
        "            border: 1px  solid  #dddddd;\n",
        "            text-align: left;\n",
        "            padding: 8px;\n",
        "        }\n",
        "        th { background-color: #f2f2f2; }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "    <h1>File Integrity Monitoring Logs</h1>\n",
        "    <table>\n",
        "        <thead>\n",
        "            <tr><th>Time</th><th>File</th><th>Status</th></tr>\n",
        "        </thead>\n",
        "        <tbody>\n",
        "            {% for row in logs %}\n",
        "            <tr>\n",
        "                <td>{{ row[0] }}</td>\n",
        "                <td>{{ row[1] }}</td>\n",
        "                <td>{{ row[2] }}</td>\n",
        "            </tr>\n",
        "            {% endfor %}\n",
        "        </tbody>\n",
        "    </table>\n",
        "</body>\n",
        "</html>"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "YU2Szusfijyp",
        "outputId": "76812ada-75b9-41a1-ba60-7b801c10e1fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid decimal literal (<ipython-input-17-1e17ae94e0b5>, line 11)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-17-1e17ae94e0b5>\"\u001b[0;36m, line \u001b[0;32m11\u001b[0m\n\u001b[0;31m    border: 1px  solid  #dddddd;\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid decimal literal\n"
          ]
        }
      ]
    }
  ]
}